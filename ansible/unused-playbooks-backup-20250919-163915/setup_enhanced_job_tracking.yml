---
# Enhanced ServiceNow Job Status Tracking Setup
# Creates comprehensive workflow for AAP job monitoring with incidents
- name: Setup Enhanced OpenShift Project Workflow with Job Status Tracking
  hosts: localhost
  gather_facts: false
  vars_files:
    - group_vars/all/vault.yml
    - servicenow_integration_vars.yml

  vars:
    sn_host: "{{ servicenow_instance_url }}"
    sn_username: "{{ servicenow_admin_user }}"
    sn_password: "{{ vault_servicenow_admin_password }}"
    aap_token: "{{ vault_aap_token }}"

  tasks:
    # 1. Create AAP Token System Property
    - name: Create AAP Bearer Token System Property
      uri:
        url: "{{ sn_host }}/api/now/table/sys_properties"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: POST
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        body:
          name: "aap.bearer.token"
          value: "{{ aap_token }}"
          description: "AAP Bearer Token for OpenShift Project Automation"
          type: "string"
          suffix: "aap_integration"
        status_code: [201, 400]  # 400 if already exists
        return_content: yes
      register: token_property_creation
      ignore_errors: yes

    # 2. Create Custom Fields for Incident Tracking
    - name: Create AAP Job ID Field for Incidents
      uri:
        url: "{{ sn_host }}/api/now/table/sys_dictionary"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: POST
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        body:
          table: "incident"
          element: "u_aap_job_id"
          column_label: "AAP Job ID"
          internal_type: "string"
          max_length: "40"
          active: true
        status_code: [201, 400]  # 400 if already exists
        return_content: yes
      register: incident_field_creation
      ignore_errors: yes

    - name: Create Related Request Field for Incidents
      uri:
        url: "{{ sn_host }}/api/now/table/sys_dictionary"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: POST
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        body:
          table: "incident"
          element: "u_related_request"
          column_label: "Related Request"
          internal_type: "reference"
          reference: "sc_request"
          max_length: "32"
          active: true
        status_code: [201, 400]
        return_content: yes
      register: incident_request_field
      ignore_errors: yes

    - name: Create Related RITM Field for Incidents
      uri:
        url: "{{ sn_host }}/api/now/table/sys_dictionary"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: POST
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        body:
          table: "incident"
          element: "u_related_ritm"
          column_label: "Related Request Item"
          internal_type: "reference"
          reference: "sc_req_item"
          max_length: "32"
          active: true
        status_code: [201, 400]
        return_content: yes
      register: incident_ritm_field
      ignore_errors: yes

    # 3. Disable Old Business Rule (if exists)
    - name: Check for Existing AAP Trigger Rule
      uri:
        url: "{{ sn_host }}/api/now/table/sys_script?sysparm_query=name=OpenShift%20Project%20AAP%20Trigger"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        return_content: yes
      register: existing_rule_check

    - name: Disable Old AAP Trigger Rule
      uri:
        url: "{{ sn_host }}/api/now/table/sys_script/{{ item.sys_id }}"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: PATCH
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        body:
          active: false
          description: "Disabled - Replaced by Enhanced Job Status Tracking"
        status_code: 200
        return_content: yes
      loop: "{{ existing_rule_check.json.result }}"
      when: existing_rule_check.json.result | length > 0
      register: old_rule_disable

    # 4. Create Enhanced Business Rule with Job Tracking
    - name: Create Enhanced OpenShift Project Business Rule
      uri:
        url: "{{ sn_host }}/api/now/table/sys_script"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: POST
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        body:
          name: "OpenShift Project with Status Tracking"
          table: "sc_req_item"
          condition: "cat_item=1a3b56b1470cfa50292cc82f316d4378^ORcat_item=aa3b1e75470cfa50292cc82f316d43e2^state=3"
          when: "after"
          active: true
          description: "Enhanced OpenShift project creation with incident-based job status tracking"
          script: |
            (function executeRule(current, previous) {
                
                // Only trigger when state changes to 'work_in_progress' (state = 3)
                if (current.state != '3' || (previous && previous.state == '3')) {
                    return;
                }
                
                // Get catalog variables
                var variables = {};
                var gr = new GlideRecord('sc_item_option_mtom');
                gr.addQuery('request_item', current.sys_id);
                gr.query();
                
                while (gr.next()) {
                    var option = gr.sc_item_option.getRefRecord();
                    if (option) {
                        variables[option.name] = gr.sc_item_option.value;
                    }
                }
                
                var projectName = variables.project_name || 'default-project';
                var environment = variables.environment || 'development';
                
                // 1. Create Incident for Job Status Tracking
                var incidentGr = new GlideRecord('incident');
                incidentGr.initialize();
                incidentGr.short_description = 'OpenShift Project Creation: ' + projectName;
                incidentGr.description = 'Tracking AAP job for OpenShift project creation\n' +
                                       'Project: ' + projectName + '\n' +
                                       'Environment: ' + environment + '\n' +
                                       'ServiceNow Request: ' + current.request.number + '\n' +
                                       'Requestor: ' + current.request.requested_for.user_name;
                incidentGr.category = 'Infrastructure';
                incidentGr.subcategory = 'Platform';
                incidentGr.impact = '3';
                incidentGr.urgency = '3';
                incidentGr.priority = '4';
                incidentGr.state = '2'; // In Progress
                incidentGr.caller_id = current.request.requested_for;
                incidentGr.assignment_group = 'Platform Engineering';
                incidentGr.u_related_request = current.request.sys_id;
                incidentGr.u_related_ritm = current.sys_id;
                
                var incidentId = incidentGr.insert();
                
                if (!incidentId) {
                    gs.error('Failed to create tracking incident for RITM: ' + current.number);
                    current.work_notes = 'Error: Could not create status tracking incident';
                    current.update();
                    return;
                }
                
                gs.log('Tracking incident created: ' + incidentGr.number + ' for RITM: ' + current.number);
                
                // 2. Get AAP token
                var aapToken = gs.getProperty('aap.bearer.token');
                if (!aapToken) {
                    gs.error('AAP Bearer token not found in system properties');
                    current.work_notes = 'Configuration error: AAP token not found';
                    incidentGr.work_notes = 'Failed to launch AAP job: Token not configured';
                    incidentGr.state = '7'; // Closed
                    incidentGr.close_code = 'Solved (Permanently)';
                    incidentGr.close_notes = 'Configuration error';
                    incidentGr.update();
                    current.update();
                    return;
                }
                
                // 3. Prepare AAP job variables with tracking info
                var jobVars = {
                    project_name: projectName,
                    display_name: variables.display_name || projectName,
                    environment: environment,
                    requestor_first_name: variables.requestor_first_name || 'Unknown',
                    requestor_last_name: variables.requestor_last_name || 'User',
                    team_members: variables.team_members || 'default',
                    business_justification: variables.business_justification || 'ServiceNow Request',
                    servicenow_request_number: current.request.number.toString(),
                    servicenow_incident_number: incidentGr.number.toString(),
                    requestor: current.request.requested_for.user_name.toString()
                };
                
                // Add database variables if present
                if (variables.database_type) {
                    jobVars.database_type = variables.database_type;
                    jobVars.database_size = variables.database_size || '5Gi';
                }
                
                // 4. Launch AAP Job
                try {
                    var request = new sn_ws.RESTMessageV2();
                    request.setEndpoint('https://ansible-controller-aap.apps.cluster-lgkp4.lgkp4.sandbox1321.opentlc.com/api/v2/job_templates/9/launch/');
                    request.setHttpMethod('POST');
                    request.setRequestHeader('Authorization', 'Bearer ' + aapToken);
                    request.setRequestHeader('Content-Type', 'application/json');
                    
                    var payload = {
                        extra_vars: jobVars
                    };
                    
                    request.setRequestBody(JSON.stringify(payload));
                    
                    var response = request.execute();
                    var responseBody = response.getBody();
                    var httpStatus = response.getStatusCode();
                    
                    gs.log('AAP API Response - Status: ' + httpStatus + ', Body: ' + responseBody);
                    
                    if (httpStatus == 201) {
                        var jobData = JSON.parse(responseBody);
                        var jobId = jobData.job;
                        
                        // Update RITM with success
                        current.work_notes = '✅ AAP Job launched successfully!\n' +
                                           '📊 Job ID: ' + jobId + '\n' +
                                           '🎫 Tracking Incident: ' + incidentGr.number + '\n' +
                                           '⏰ Started: ' + new GlideDateTime() + '\n' +
                                           '\n👀 Check incident ' + incidentGr.number + ' for real-time status updates';
                        current.update();
                        
                        // Update Incident with job tracking info
                        incidentGr.work_notes = '🚀 AAP Job launched successfully!\n' +
                                              '📊 Job ID: ' + jobId + '\n' +
                                              '📋 Project: ' + projectName + '\n' +
                                              '🌍 Environment: ' + environment + '\n' +
                                              '⏰ Started: ' + new GlideDateTime() + '\n' +
                                              '\n🔄 Monitoring job status...';
                        incidentGr.u_aap_job_id = jobId;
                        incidentGr.update();
                        
                        gs.log('OpenShift AAP Job launched: ' + jobId + ' for request: ' + current.number + ', tracking via incident: ' + incidentGr.number);
                        
                    } else {
                        // Handle failure
                        var errorMsg = '❌ Failed to launch AAP job\n' +
                                      '📊 HTTP Status: ' + httpStatus + '\n' +
                                      '📝 Response: ' + responseBody + '\n' +
                                      '⏰ Failed at: ' + new GlideDateTime();
                        
                        current.work_notes = errorMsg;
                        current.state = '4'; // Closed Incomplete
                        current.close_code = 'Failed';
                        current.close_notes = 'AAP job launch failed';
                        current.update();
                        
                        incidentGr.work_notes = errorMsg;
                        incidentGr.state = '7'; // Closed
                        incidentGr.close_code = 'Solved (Permanently)';
                        incidentGr.close_notes = 'AAP job launch failed';
                        incidentGr.update();
                        
                        gs.error('Failed to launch AAP job for request: ' + current.number + '. Status: ' + httpStatus);
                    }
                } catch (ex) {
                    var errorMsg = '💥 Exception launching AAP job\n' +
                                  '📝 Error: ' + ex.message + '\n' +
                                  '⏰ Failed at: ' + new GlideDateTime();
                    
                    current.work_notes = errorMsg;
                    current.state = '4'; // Closed Incomplete
                    current.close_code = 'Failed';
                    current.close_notes = 'AAP integration error';
                    current.update();
                    
                    incidentGr.work_notes = errorMsg;
                    incidentGr.state = '7'; // Closed
                    incidentGr.close_code = 'Solved (Permanently)';
                    incidentGr.close_notes = 'AAP integration error';
                    incidentGr.update();
                    
                    gs.error('Exception launching AAP job for request: ' + current.number + '. Error: ' + ex.message);
                }
                
            })(current, previous);
        status_code: 201
        return_content: yes
      register: enhanced_rule_creation

    # 5. Create AAP Job Status Monitor Business Rule
    - name: Create AAP Job Status Monitor
      uri:
        url: "{{ sn_host }}/api/now/table/sys_script"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: POST
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        body:
          name: "AAP Job Status Monitor"
          table: "incident"
          condition: "u_aap_job_id!=NULL^state=2"
          when: "async_always"
          active: true
          description: "Monitors AAP job status and updates incidents with real-time progress"
          script: |
            (function executeRule(current, previous) {

                var aapJobId = current.u_aap_job_id;
                if (!aapJobId) {
                    return;
                }

                // Get AAP token
                var aapToken = gs.getProperty('aap.bearer.token');
                if (!aapToken) {
                    gs.error('AAP Bearer token not found for job monitoring');
                    return;
                }

                try {
                    // Check AAP job status
                    var request = new sn_ws.RESTMessageV2();
                    request.setEndpoint('https://ansible-controller-aap.apps.cluster-lgkp4.lgkp4.sandbox1321.opentlc.com/api/v2/jobs/' + aapJobId + '/');
                    request.setHttpMethod('GET');
                    request.setRequestHeader('Authorization', 'Bearer ' + aapToken);

                    var response = request.execute();
                    var responseBody = response.getBody();
                    var httpStatus = response.getStatusCode();

                    if (httpStatus == 200) {
                        var jobData = JSON.parse(responseBody);
                        var jobStatus = jobData.status;
                        var jobFinished = jobData.finished;
                        var jobStarted = jobData.started;

                        gs.log('AAP Job ' + aapJobId + ' status: ' + jobStatus + ' for incident: ' + current.number);

                        if (jobStatus == 'successful') {
                            // Job completed successfully
                            current.work_notes = '✅ SUCCESS: OpenShift project created successfully!\n' +
                                               '📊 Job ID: ' + aapJobId + '\n' +
                                               '⏰ Started: ' + jobStarted + '\n' +
                                               '🏁 Completed: ' + jobFinished + '\n' +
                                               '\n🎉 Your OpenShift project is ready to use!';
                            current.state = '6'; // Resolved
                            current.close_code = 'Solved (Permanently)';
                            current.close_notes = 'OpenShift project created successfully via AAP job ' + aapJobId;
                            current.update();

                            // Update related RITM
                            var ritmGr = new GlideRecord('sc_req_item');
                            if (ritmGr.get(current.u_related_ritm)) {
                                ritmGr.work_notes = '✅ PROJECT CREATED SUCCESSFULLY!\n' +
                                                  '📊 AAP Job: ' + aapJobId + '\n' +
                                                  '🎫 Incident: ' + current.number + '\n' +
                                                  '🏁 Completed: ' + jobFinished + '\n' +
                                                  '\n🎉 Your OpenShift project is ready!';
                                ritmGr.state = '3'; // Closed Complete
                                ritmGr.update();
                            }

                        } else if (jobStatus == 'failed') {
                            // Job failed
                            current.work_notes = '❌ FAILED: OpenShift project creation failed\n' +
                                               '📊 Job ID: ' + aapJobId + '\n' +
                                               '⏰ Started: ' + jobStarted + '\n' +
                                               '💥 Failed: ' + jobFinished + '\n' +
                                               '\n🔧 Please contact Platform Engineering for assistance';
                            current.state = '7'; // Closed
                            current.close_code = 'Solved (Permanently)';
                            current.close_notes = 'OpenShift project creation failed - AAP job ' + aapJobId;
                            current.update();

                            // Update related RITM
                            var ritmGr = new GlideRecord('sc_req_item');
                            if (ritmGr.get(current.u_related_ritm)) {
                                ritmGr.work_notes = '❌ PROJECT CREATION FAILED\n' +
                                                  '📊 AAP Job: ' + aapJobId + '\n' +
                                                  '🎫 Incident: ' + current.number + '\n' +
                                                  '💥 Failed: ' + jobFinished + '\n' +
                                                  '\n🔧 Platform Engineering has been notified';
                                ritmGr.state = '4'; // Closed Incomplete
                                ritmGr.close_code = 'Failed';
                                ritmGr.close_notes = 'AAP job execution failed';
                                ritmGr.update();
                            }

                        } else if (jobStatus == 'running') {
                            // Job still running - update with progress
                            var currentTime = new GlideDateTime();
                            current.work_notes = '🔄 IN PROGRESS: Creating your OpenShift project...\n' +
                                               '📊 Job ID: ' + aapJobId + '\n' +
                                               '⏰ Started: ' + jobStarted + '\n' +
                                               '🔄 Status checked: ' + currentTime + '\n' +
                                               '\n⏳ Please wait while we set up your project';
                            current.update();

                        } else if (jobStatus == 'pending') {
                            // Job pending - waiting to start
                            current.work_notes = '⏳ PENDING: Your OpenShift project request is queued\n' +
                                               '📊 Job ID: ' + aapJobId + '\n' +
                                               '📅 Queued: ' + jobStarted + '\n' +
                                               '\n🔄 Job will start shortly...';
                            current.update();
                        }

                    } else {
                        gs.error('Failed to check AAP job status for incident ' + current.number + '. HTTP Status: ' + httpStatus);
                    }

                } catch (ex) {
                    gs.error('Exception checking AAP job status for incident ' + current.number + ': ' + ex.message);
                }

            })(current, previous);
        status_code: 201
        return_content: yes
      register: monitor_rule_creation

    # 6. Display Setup Results
    - name: Display Enhanced Job Tracking Setup Results
      debug:
        msg: |
          🎯 Enhanced OpenShift Project Workflow with Job Status Tracking Setup Complete!

          ✅ Components Created:
          1. 🔑 AAP Bearer Token System Property
          2. 📋 Custom Fields for Incident Tracking
             - u_aap_job_id (AAP Job ID)
             - u_related_request (Related Request)
             - u_related_ritm (Related Request Item)
          3. 🔄 Enhanced Business Rule: "OpenShift Project with Status Tracking"
             - Triggers on catalog requests (state = 3)
             - Creates incident for job tracking
             - Launches AAP job with incident reference
             - Rich status updates with emojis
          4. 📊 Job Status Monitor: "AAP Job Status Monitor"
             - Real-time AAP job status monitoring
             - Automatic incident updates
             - Auto-closure on completion/failure

          🎯 User Experience:
          ✅ Same simple catalog request submission
          ✅ Automatic incident creation for tracking
          ✅ Real-time job status updates
          ✅ Rich status messages with emojis
          ✅ Automatic closure when complete

          🚀 Benefits:
          ✅ Full job status visibility
          ✅ Enterprise-grade tracking
          ✅ Automated error handling
          ✅ Complete audit trail
          ✅ No additional user complexity

          📋 What Users See:
          • RITM: Job launch confirmation + incident reference
          • Incident: Real-time job progress updates
          • Notifications: Status changes and completion

          🎯 Ready for Testing!
          Submit a new OpenShift project request to see the enhanced workflow in action.
