---
# Enhanced ServiceNow Change Management Integration
# Creates Change Requests and Incidents for AAP job tracking
- name: Setup Change Management Workflow for OpenShift Projects
  hosts: localhost
  gather_facts: false
  vars_files:
    - group_vars/all/vault.yml
    - servicenow_integration_vars.yml

  vars:
    sn_host: "{{ servicenow_instance_url }}"
    sn_username: "{{ servicenow_admin_user }}"
    sn_password: "{{ vault_servicenow_admin_password }}"

  tasks:
    # 1. Create Change Management Business Rule
    - name: Create Change Request Business Rule
      uri:
        url: "{{ sn_host }}/api/now/table/sys_script"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: POST
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        body:
          name: "OpenShift Change Request Creator"
          table: "sc_req_item"
          condition: "cat_item=1a3b56b1470cfa50292cc82f316d4378^ORcat_item=aa3b1e75470cfa50292cc82f316d43e2^state=3"
          when: "after"
          active: true
          description: "Creates Change Request and Incident for OpenShift project requests"
          script: |
            (function executeRule(current, previous) {
                
                // Only trigger when state changes to 'work_in_progress' (state = 3)
                if (current.state != '3' || (previous && previous.state == '3')) {
                    return;
                }
                
                // Get catalog variables
                var variables = {};
                var gr = new GlideRecord('sc_item_option_mtom');
                gr.addQuery('request_item', current.sys_id);
                gr.query();
                
                while (gr.next()) {
                    var option = gr.sc_item_option.getRefRecord();
                    if (option) {
                        variables[option.name] = gr.sc_item_option.value;
                    }
                }
                
                var projectName = variables.project_name || 'default-project';
                var environment = variables.environment || 'development';
                
                // 1. Create Change Request
                var changeGr = new GlideRecord('change_request');
                changeGr.initialize();
                changeGr.short_description = 'OpenShift Project Creation: ' + projectName;
                changeGr.description = 'Automated creation of OpenShift project: ' + projectName + 
                                     '\nEnvironment: ' + environment +
                                     '\nServiceNow Request: ' + current.request.number +
                                     '\nRequestor: ' + current.request.requested_for.user_name;
                changeGr.category = 'Software';
                changeGr.type = 'Standard';
                changeGr.risk = 'Low';
                changeGr.impact = '3';
                changeGr.urgency = '3';
                changeGr.priority = '4';
                changeGr.state = '1'; // New
                changeGr.requested_by = current.request.requested_for;
                changeGr.assignment_group = 'Platform Engineering';
                changeGr.implementation_plan = 'Automated OpenShift project creation via AAP:\n1. Create namespace\n2. Apply RBAC\n3. Configure monitoring\n4. Setup networking';
                changeGr.backout_plan = 'Delete namespace and associated resources if creation fails';
                changeGr.test_plan = 'Verify project accessibility and resource quotas';
                changeGr.u_related_request = current.request.sys_id;
                changeGr.u_related_ritm = current.sys_id;
                
                var changeId = changeGr.insert();
                
                if (changeId) {
                    gs.log('Change Request created: ' + changeGr.number + ' for RITM: ' + current.number);
                    
                    // 2. Create Incident for AAP Job Tracking
                    var incidentGr = new GlideRecord('incident');
                    incidentGr.initialize();
                    incidentGr.short_description = 'AAP Job Tracking: OpenShift Project ' + projectName;
                    incidentGr.description = 'Tracking AAP job execution for OpenShift project creation\n' +
                                           'Project: ' + projectName + '\n' +
                                           'Change Request: ' + changeGr.number + '\n' +
                                           'ServiceNow Request: ' + current.request.number;
                    incidentGr.category = 'Infrastructure';
                    incidentGr.subcategory = 'Platform';
                    incidentGr.impact = '3';
                    incidentGr.urgency = '3';
                    incidentGr.priority = '4';
                    incidentGr.state = '2'; // In Progress
                    incidentGr.caller_id = current.request.requested_for;
                    incidentGr.assignment_group = 'Platform Engineering';
                    incidentGr.u_change_request = changeId;
                    incidentGr.u_related_request = current.request.sys_id;
                    incidentGr.u_related_ritm = current.sys_id;
                    
                    var incidentId = incidentGr.insert();
                    
                    if (incidentId) {
                        gs.log('Incident created: ' + incidentGr.number + ' for AAP job tracking');
                        
                        // 3. Launch AAP Job with tracking info
                        var aapToken = gs.getProperty('aap.bearer.token');
                        if (!aapToken) {
                            gs.error('AAP Bearer token not found in system properties');
                            current.work_notes = 'Configuration error: AAP token not found';
                            incidentGr.work_notes = 'Failed to launch AAP job: Token not configured';
                            incidentGr.state = '7'; // Closed
                            incidentGr.close_code = 'Solved (Permanently)';
                            incidentGr.close_notes = 'Configuration error resolved';
                            incidentGr.update();
                            current.update();
                            return;
                        }
                        
                        // Prepare AAP job variables with tracking info
                        var jobVars = {
                            project_name: projectName,
                            display_name: variables.display_name || projectName,
                            environment: environment,
                            requestor_first_name: variables.requestor_first_name || 'Unknown',
                            requestor_last_name: variables.requestor_last_name || 'User',
                            team_members: variables.team_members || 'default',
                            business_justification: variables.business_justification || 'ServiceNow Request',
                            servicenow_request_number: current.request.number.toString(),
                            servicenow_change_number: changeGr.number.toString(),
                            servicenow_incident_number: incidentGr.number.toString(),
                            requestor: current.request.requested_for.user_name.toString()
                        };
                        
                        // Add database variables if present
                        if (variables.database_type) {
                            jobVars.database_type = variables.database_type;
                            jobVars.database_size = variables.database_size || '5Gi';
                        }
                        
                        // Call AAP API
                        try {
                            var request = new sn_ws.RESTMessageV2();
                            request.setEndpoint('https://ansible-controller-aap.apps.cluster-lgkp4.lgkp4.sandbox1321.opentlc.com/api/v2/job_templates/9/launch/');
                            request.setHttpMethod('POST');
                            request.setRequestHeader('Authorization', 'Bearer ' + aapToken);
                            request.setRequestHeader('Content-Type', 'application/json');
                            
                            var payload = {
                                extra_vars: jobVars
                            };
                            
                            request.setRequestBody(JSON.stringify(payload));
                            
                            var response = request.execute();
                            var responseBody = response.getBody();
                            var httpStatus = response.getStatusCode();
                            
                            gs.log('AAP API Response - Status: ' + httpStatus + ', Body: ' + responseBody);
                            
                            if (httpStatus == 201) {
                                var jobData = JSON.parse(responseBody);
                                var jobId = jobData.job;
                                
                                // Update RITM
                                current.work_notes = 'Change Request: ' + changeGr.number + 
                                                   '\nIncident: ' + incidentGr.number +
                                                   '\nAAP Job launched: ' + jobId + 
                                                   '\nTimestamp: ' + new GlideDateTime();
                                current.update();
                                
                                // Update Change Request
                                changeGr.work_notes = 'AAP Job launched successfully. Job ID: ' + jobId;
                                changeGr.state = '2'; // Assess
                                changeGr.u_aap_job_id = jobId;
                                changeGr.update();
                                
                                // Update Incident with job tracking
                                incidentGr.work_notes = 'AAP Job launched successfully. Job ID: ' + jobId + 
                                                      '\nMonitoring job status...';
                                incidentGr.u_aap_job_id = jobId;
                                incidentGr.update();
                                
                                gs.log('OpenShift AAP Job launched: ' + jobId + ' for request: ' + current.number);
                                
                            } else {
                                // Handle failure
                                var errorMsg = 'Failed to launch AAP job. HTTP Status: ' + httpStatus + '. Response: ' + responseBody;
                                
                                current.work_notes = errorMsg + ' at ' + new GlideDateTime();
                                current.update();
                                
                                changeGr.work_notes = errorMsg;
                                changeGr.state = '4'; // Canceled
                                changeGr.close_code = 'Failed';
                                changeGr.close_notes = 'AAP job launch failed';
                                changeGr.update();
                                
                                incidentGr.work_notes = errorMsg;
                                incidentGr.state = '7'; // Closed
                                incidentGr.close_code = 'Solved (Permanently)';
                                incidentGr.close_notes = 'AAP job launch failed';
                                incidentGr.update();
                                
                                gs.error('Failed to launch AAP job for request: ' + current.number + '. Status: ' + httpStatus);
                            }
                        } catch (ex) {
                            var errorMsg = 'Exception launching AAP job: ' + ex.message;
                            
                            current.work_notes = errorMsg + ' at ' + new GlideDateTime();
                            current.update();
                            
                            changeGr.work_notes = errorMsg;
                            changeGr.state = '4'; // Canceled
                            changeGr.close_code = 'Failed';
                            changeGr.close_notes = 'AAP integration error';
                            changeGr.update();
                            
                            incidentGr.work_notes = errorMsg;
                            incidentGr.state = '7'; // Closed
                            incidentGr.close_code = 'Solved (Permanently)';
                            incidentGr.close_notes = 'AAP integration error';
                            incidentGr.update();
                            
                            gs.error('Exception launching AAP job for request: ' + current.number + '. Error: ' + ex.message);
                        }
                    }
                }
            })(current, previous);
        status_code: 201
        return_content: yes
      register: change_rule_creation
      ignore_errors: yes

    - name: Display Change Management Setup Results
      debug:
        msg: |
          🎯 Enhanced Change Management Workflow Created!
          
          ✅ What's New:
          1. 📋 Change Request Creation
             - Automatic change request for each OpenShift project
             - Proper risk assessment and approval workflow
             - Implementation and backout plans
          
          2. 🎫 Incident for AAP Job Tracking
             - Real-time job status monitoring
             - Automated updates from AAP
             - Error handling and escalation
          
          3. 🔄 Closed-Loop Integration
             - Change Request → AAP Job → Incident Updates
             - Automatic closure on completion
             - Full audit trail
          
          🎯 Benefits:
          ✅ Enterprise-grade change management
          ✅ Real-time status tracking
          ✅ Automated error handling
          ✅ Complete audit trail
          ✅ Proper approval workflows
          
          🚀 Next Steps:
          1. Test with new ServiceNow request
          2. Monitor Change Request creation
          3. Track Incident updates
          4. Verify AAP job completion handling

    # 2. Create AAP Job Status Monitor (Scheduled Job)
    - name: Create AAP Job Status Monitor Business Rule
      uri:
        url: "{{ sn_host }}/api/now/table/sys_script"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: POST
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        body:
          name: "AAP Job Status Monitor"
          table: "incident"
          condition: "u_aap_job_id!=NULL^state=2"
          when: "async_always"
          active: true
          description: "Monitors AAP job status and updates incidents"
          script: |
            (function executeRule(current, previous) {

                var aapJobId = current.u_aap_job_id;
                if (!aapJobId) {
                    return;
                }

                // Get AAP token
                var aapToken = gs.getProperty('aap.bearer.token');
                if (!aapToken) {
                    gs.error('AAP Bearer token not found for job monitoring');
                    return;
                }

                try {
                    // Check AAP job status
                    var request = new sn_ws.RESTMessageV2();
                    request.setEndpoint('https://ansible-controller-aap.apps.cluster-lgkp4.lgkp4.sandbox1321.opentlc.com/api/v2/jobs/' + aapJobId + '/');
                    request.setHttpMethod('GET');
                    request.setRequestHeader('Authorization', 'Bearer ' + aapToken);

                    var response = request.execute();
                    var responseBody = response.getBody();
                    var httpStatus = response.getStatusCode();

                    if (httpStatus == 200) {
                        var jobData = JSON.parse(responseBody);
                        var jobStatus = jobData.status;
                        var jobFinished = jobData.finished;

                        gs.log('AAP Job ' + aapJobId + ' status: ' + jobStatus);

                        if (jobStatus == 'successful') {
                            // Job completed successfully
                            current.work_notes = 'AAP Job ' + aapJobId + ' completed successfully at ' + jobFinished;
                            current.state = '6'; // Resolved
                            current.close_code = 'Solved (Permanently)';
                            current.close_notes = 'OpenShift project created successfully';
                            current.update();

                            // Update related Change Request
                            var changeGr = new GlideRecord('change_request');
                            if (changeGr.get(current.u_change_request)) {
                                changeGr.work_notes = 'AAP Job completed successfully. Project created.';
                                changeGr.state = '3'; // Implement
                                changeGr.update();
                            }

                        } else if (jobStatus == 'failed') {
                            // Job failed
                            current.work_notes = 'AAP Job ' + aapJobId + ' failed at ' + jobFinished;
                            current.state = '7'; // Closed
                            current.close_code = 'Solved (Permanently)';
                            current.close_notes = 'OpenShift project creation failed';
                            current.update();

                            // Update related Change Request
                            var changeGr = new GlideRecord('change_request');
                            if (changeGr.get(current.u_change_request)) {
                                changeGr.work_notes = 'AAP Job failed. Project creation unsuccessful.';
                                changeGr.state = '4'; // Canceled
                                changeGr.close_code = 'Failed';
                                changeGr.close_notes = 'AAP job execution failed';
                                changeGr.update();
                            }

                        } else if (jobStatus == 'running') {
                            // Job still running
                            current.work_notes = 'AAP Job ' + aapJobId + ' is still running...';
                            current.update();
                        }

                    } else {
                        gs.error('Failed to check AAP job status. HTTP Status: ' + httpStatus);
                    }

                } catch (ex) {
                    gs.error('Exception checking AAP job status: ' + ex.message);
                }

            })(current, previous);
        status_code: 201
        return_content: yes
      register: monitor_rule_creation
      ignore_errors: yes

    # 3. Create Custom Fields for Tracking
    - name: Create Custom Fields for Change Request
      uri:
        url: "{{ sn_host }}/api/now/table/sys_dictionary"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: POST
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        body:
          table: "change_request"
          element: "u_aap_job_id"
          column_label: "AAP Job ID"
          internal_type: "string"
          max_length: "40"
          active: true
        status_code: 201
        return_content: yes
      register: change_field_creation
      ignore_errors: yes

    - name: Create Custom Fields for Incident
      uri:
        url: "{{ sn_host }}/api/now/table/sys_dictionary"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
        method: POST
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        body:
          table: "incident"
          element: "u_aap_job_id"
          column_label: "AAP Job ID"
          internal_type: "string"
          max_length: "40"
          active: true
        status_code: 201
        return_content: yes
      register: incident_field_creation
      ignore_errors: yes
