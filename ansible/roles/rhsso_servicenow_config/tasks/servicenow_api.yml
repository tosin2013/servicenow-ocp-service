---
# ServiceNow REST API Tasks for Complete OAuth Configuration
# This file automates the ServiceNow-side OAuth configuration using ServiceNow's Table API
# Based on ServiceNow documentation and community best practices

- name: Test ServiceNow Instance Connectivity
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/sys_user?sysparm_limit=1"
    method: GET
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
      Content-Type: "application/json"
    validate_certs: false
  register: servicenow_connectivity_test
  failed_when: false

- name: Display ServiceNow Connectivity Status
  debug:
    msg: "ServiceNow connectivity test: {{ 'SUCCESS' if servicenow_connectivity_test.status == 200 else 'FAILED - Status: ' + servicenow_connectivity_test.status|string }}"

- name: Fail if ServiceNow is not accessible
  fail:
    msg: "Cannot connect to ServiceNow instance {{ servicenow_instance_url }}. Please verify credentials and network connectivity."
  when: servicenow_connectivity_test.status != 200

# Step 1: Create OAuth Entity Profile (OAuth Provider Configuration)
# Step 1: Create OAuth Entity Profile for Keycloak
- name: Check if OAuth Entity Profile already exists
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/oauth_entity_profile?sysparm_query=name={{ oauth_entity_profile_name }}"
    method: GET
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
    validate_certs: false
  register: existing_oauth_entity_profile
  failed_when: false

- name: Create OAuth Entity Profile for Keycloak
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/oauth_entity_profile"
    method: POST
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ oauth_entity_profile_name }}"
      grant_type: "{{ oauth_grant_type }}"
      default: "false"
    validate_certs: false
  register: oauth_entity_profile_result
  failed_when: false
  when: existing_oauth_entity_profile.status == 200 and existing_oauth_entity_profile.json.result | length == 0

- name: Display OAuth Entity Profile Creation Result
  debug:
    msg: "OAuth Entity Profile: {{ 'Success' if (oauth_entity_profile_result | default({})).get('status', 0) in [200, 201] else 'Skipped or Already Exists' }}"

# Step 2: Create OAuth 2.0 Authentication Profile
# Step 2: Create OAuth 2.0 Authentication Profile
- name: Check if OAuth2 Authentication Profile already exists
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/sys_auth_profile_oauth2?sysparm_query=name={{ oauth_auth_profile_name }}"
    method: GET
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
    validate_certs: false
  register: existing_oauth_auth_profile
  failed_when: false

- name: Debug OAuth Auth Profile Check Result
  debug:
    var: existing_oauth_auth_profile

- name: Create OAuth 2.0 Authentication Profile
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/sys_auth_profile_oauth2"
    method: POST
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ oauth_auth_profile_name }}"
      oauth_profile: "{{ oauth_entity_profile_name }}"
    validate_certs: false
  register: oauth_auth_profile_result
  failed_when: false
  when: existing_oauth_auth_profile.status == 200 and existing_oauth_auth_profile.json.result | length == 0

- name: Display OAuth2 Authentication Profile Creation Result
  debug:
    msg: "OAuth2 Auth Profile: {{ 'Success' if (oauth_auth_profile_result | default({})).get('status', 0) in [200, 201] else 'Skipped or Already Exists' }}"

# Step 3: Create Application Registry Entry
# Step 3: Create Application Registry for Keycloak Integration
- name: Check if Application Registry already exists
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/oauth_entity?sysparm_query=name={{ servicenow_oauth_app_name }}"
    method: GET
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
    validate_certs: false
  register: existing_app_registry
  failed_when: false

- name: Create Application Registry for Keycloak Integration
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/oauth_entity"
    method: POST
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ servicenow_oauth_app_name }}"
      oauth_entity_profile: "keycloak_profile"
      client_id: "{{ servicenow_client_id }}"
      client_secret: "{{ servicenow_client_secret }}"
      redirect_url: "{{ servicenow_oauth_redirect_url }}"
      active: "true"
      type: "oauth_api"
      description: "{{ servicenow_oauth_app_description }}"
    status_code: [200, 201, 400]
    validate_certs: false
  register: app_registry_result
  failed_when: false
  when: existing_app_registry.status == 200 and existing_app_registry.json.result | length == 0

- name: Display Application Registry Creation Result
  debug:
    msg: "Application Registry: {{ 'Success' if (app_registry_result | default({})).get('status', 0) in [200, 201] else 'Skipped or Already Exists' }}"

# Step 4: Create Connection & Credential Alias
- name: Create Connection Alias for Keycloak
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/sys_alias"
    method: POST
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "keycloak_connection"
      connection_url: "{{ rhsso_url }}"
      type: "connection"
      multiple_credentials: "false"
      description: "{{ servicenow_oauth_app_description }}"
      active: "true"
    status_code: [200, 201, 400]
    validate_certs: false
  register: connection_alias_result
  failed_when: false

- name: Display Connection Alias Creation Result
  debug:
    msg: "Connection Alias: {{ 'Success' if (connection_alias_result | default({})).get('status', 0) in [200, 201] else 'Skipped or Failed' }}"

# Step 4b: Create Connection Alias for OpenShift API
- name: Create Connection Alias for OpenShift API
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/sys_alias"
    method: POST
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "openshift_connection"
      connection_url: "{{ openshift_api_url | default('https://api.cluster-lgkp4.lgkp4.sandbox1321.opentlc.com:6443') }}"
      type: "connection"
      multiple_credentials: "false"
      description: "OpenShift API connection for ServiceNow integration"
      active: "true"
    status_code: [200, 201, 400]
    validate_certs: false
  register: openshift_connection_alias_result
  failed_when: false

- name: Display OpenShift Connection Alias Creation Result
  debug:
    msg: "OpenShift Connection Alias: {{ 'Success' if (openshift_connection_alias_result | default({})).get('status', 0) in [200, 201] else 'Skipped or Failed' }}"

# Step 5: Create Credential Alias for OAuth
- name: Create Credential Alias for OAuth
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/sys_auth_profile"
    method: POST
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "keycloak_credentials"
      type: "oauth2_authorization_code"
      oauth_entity_profile: "keycloak_profile"
      description: "OAuth credentials for Keycloak integration"
      active: "true"
    status_code: [200, 201, 400]
    validate_certs: false
  register: credential_alias_result
  failed_when: false

- name: Display Credential Alias Creation Result
  debug:
    msg: "Credential Alias: {{ 'Success' if (credential_alias_result | default({})).get('status', 0) in [200, 201] else 'Skipped or Failed' }}"

# Step 5b: Create Credential Record for OpenShift Service Account Token
- name: Create Credential Record for OpenShift Service Account Token
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/sys_credential"
    method: POST
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "openshift_service_account_token"
      type: "token"
      token: "{{ openshift_token | default('REPLACE_WITH_OPS_TOKEN') }}"
      description: "OpenShift Service Account token for API authentication"
      active: "true"
    status_code: [200, 201, 400]
    validate_certs: false
  register: openshift_credential_result
  failed_when: false

- name: Display OpenShift Credential Creation Result
  debug:
    msg: "OpenShift Credential: {{ 'Success' if (openshift_credential_result | default({})).get('status', 0) in [200, 201] else 'Skipped or Failed' }}"

# Step 6: Verify OAuth Configuration
- name: Verify OAuth Configuration by querying created records
  uri:
    url: "{{ servicenow_instance_url }}/api/now/table/oauth_entity_profile?sysparm_query=name=keycloak_profile"
    method: GET
    user: "{{ servicenow_admin_user }}"
    password: "{{ servicenow_admin_password }}"
    force_basic_auth: yes
    headers:
      Accept: "application/json"
    validate_certs: false
  register: verification_result
  failed_when: false

- name: Display OAuth Configuration Verification
  debug:
    var: verification_result

# Step 7: Validate Connections
- name: Validate Keycloak Connection
  uri:
    url: "{{ rhsso_url }}/auth/realms/{{ servicenow_realm_name }}/protocol/openid-connect/auth"
    method: GET
    validate_certs: false
    status_code: [200, 302, 401]  # 401 is expected for auth endpoint without credentials
  register: keycloak_connection_test
  failed_when: false

- name: Display Keycloak Connection Validation
  debug:
    msg: "Keycloak Connection: {{ 'Success' if keycloak_connection_test.status in [200, 302, 401] else 'Failed' }}"

- name: Validate OpenShift Connection
  uri:
    url: "{{ openshift_api_url | default('https://api.cluster-lgkp4.lgkp4.sandbox1321.opentlc.com:6443') }}/version"
    method: GET
    headers:
      Authorization: "Bearer {{ openshift_token | default('REPLACE_WITH_OPS_TOKEN') }}"
    validate_certs: false
    status_code: [200, 401, 403]
  register: openshift_connection_test
  failed_when: false

- name: Display OpenShift Connection Validation
  debug:
    msg: "OpenShift Connection: {{ 'Success' if openshift_connection_test.status == 200 else 'Failed - Check token' }}"

# Step 8: Configuration Summary
- name: ServiceNow OAuth Configuration Summary
  debug:
    msg:
      - "=== ServiceNow OAuth Configuration Complete ==="
      - "✓ OAuth Entity Profile: {{ 'Success' if (oauth_entity_profile_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}"
      - "✓ OAuth2 Auth Profile: {{ 'Success' if (oauth_auth_profile_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}"
      - "✓ Application Registry: {{ 'Success' if (app_registry_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}"
      - "✓ Keycloak Connection Alias: {{ 'Success' if (connection_alias_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}"
      - "✓ OpenShift Connection Alias: {{ 'Success' if (openshift_connection_alias_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}"
      - "✓ Keycloak Credential Alias: {{ 'Success' if (credential_alias_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}"
      - "✓ OpenShift Credential Record: {{ 'Success' if (openshift_credential_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}"
      - "✓ Keycloak Connection Validation: {{ 'Success' if keycloak_connection_test.status in [200, 302, 401] else 'Failed' }}"
      - "✓ OpenShift Connection Validation: {{ 'Success' if openshift_connection_test.status == 200 else 'Failed' }}"
      - ""
      - "ServiceNow OAuth Integration Details:"
      - "  Keycloak Authorization URL: {{ rhsso_url }}/auth/realms/{{ servicenow_realm_name }}/protocol/openid-connect/auth"
      - "  Keycloak Token URL: {{ rhsso_url }}/auth/realms/{{ servicenow_realm_name }}/protocol/openid-connect/token"
      - "  Client ID: {{ servicenow_client_id }}"
      - "  Redirect URL: {{ servicenow_oauth_redirect_url }}"
      - ""
      - "Connection & Credential Aliases:"
      - "  Keycloak Connection: keycloak_connection"
      - "  OpenShift Connection: openshift_connection"
      - "  Keycloak Credentials: keycloak_credentials"
      - "  OpenShift Credentials: openshift_service_account_token"
      - ""
      - "Next Steps:"
      - "  1. Test OAuth flow in ServiceNow"
      - "  2. Configure REST messages to use 'Keycloak OAuth2 Profile'"
      - "  3. Implement Flow Designer workflows with OAuth connection alias 'keycloak_connection'"
      - "  4. Use OpenShift connection alias 'openshift_connection' for API calls"
      - "  5. Use OpenShift credential 'openshift_service_account_token' for authentication"

- name: Save OAuth Configuration Details to File
  copy:
    content: |
      # ServiceNow OAuth Configuration Summary
      # Generated on {{ ansible_date_time.iso8601 }}
      
      ## Keycloak Configuration
      - Keycloak URL: {{ rhsso_url }}
      - Realm: {{ servicenow_realm_name }}
      - Client ID: {{ servicenow_client_id }}
      - Authorization URL: {{ rhsso_url }}/auth/realms/{{ servicenow_realm_name }}/protocol/openid-connect/auth
      - Token URL: {{ rhsso_url }}/auth/realms/{{ servicenow_realm_name }}/protocol/openid-connect/token
      
      ## OpenShift Configuration
      - OpenShift API URL: {{ openshift_api_url | default('https://api.cluster-lgkp4.lgkp4.sandbox1321.opentlc.com:6443') }}
      - Service Account Token: [STORED IN SERVICENOW CREDENTIAL RECORD]
      
      ## ServiceNow Configuration
      - Instance URL: {{ servicenow_instance_url }}
      - OAuth Entity Profile: keycloak_profile
      - OAuth2 Auth Profile: Keycloak OAuth2 Profile
      - Application Registry: {{ servicenow_oauth_app_name }}
      - Keycloak Connection Alias: keycloak_connection
      - OpenShift Connection Alias: openshift_connection
      - Keycloak Credential Alias: keycloak_credentials
      - OpenShift Credential Record: openshift_service_account_token
      - Redirect URL: {{ servicenow_oauth_redirect_url }}
      
      ## Integration Status
      - OAuth Entity Profile: {{ 'Success' if (oauth_entity_profile_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}
      - OAuth2 Auth Profile: {{ 'Success' if (oauth_auth_profile_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}
      - Application Registry: {{ 'Success' if (app_registry_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}
      - Keycloak Connection Alias: {{ 'Success' if (connection_alias_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}
      - OpenShift Connection Alias: {{ 'Success' if (openshift_connection_alias_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}
      - Keycloak Credential Alias: {{ 'Success' if (credential_alias_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}
      - OpenShift Credential Record: {{ 'Success' if (openshift_credential_result | default({})).get('status', 0) in [200, 201] else 'Skipped/Failed' }}
      - Keycloak Connection Validation: {{ 'Success' if keycloak_connection_test.status in [200, 302, 401] else 'Failed' }}
      - OpenShift Connection Validation: {{ 'Success' if openshift_connection_test.status == 200 else 'Failed' }}
      
      ## Usage Instructions
      1. In ServiceNow, navigate to System OAuth > Application Registry
      2. Find "{{ servicenow_oauth_app_name }}" and test the OAuth flow
      3. Use "Keycloak OAuth2 Profile" in REST message authentication
      4. Configure Flow Designer with OAuth connection alias "keycloak_connection"
      5. Use OpenShift connection alias "openshift_connection" for API calls
      6. Use OpenShift credential record "openshift_service_account_token" for authentication
      
      ## Testing the Integration
      1. Go to ServiceNow: {{ servicenow_instance_url }}
      2. Navigate to System OAuth > Application Registry
      3. Click on "{{ servicenow_oauth_app_name }}"
      4. Click "Get OAuth Token" to test the flow
      5. Verify redirect to Keycloak and successful token exchange
      6. Test OpenShift API connectivity using the connection and credential aliases
    dest: /tmp/servicenow_oauth_config_summary.md
  delegate_to: localhost
  run_once: true
