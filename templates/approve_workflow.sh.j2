#!/bin/bash
#
# ServiceNow Workflow Approval Script (Generated from Jinja2 Template)
# Approves ServiceNow requests and moves them through the workflow states
# Usage: ./approve_workflow.sh REQ0010025
#

set -euo pipefail

# Configuration (from Ansible variables)
SERVICENOW_URL="{{ servicenow_instance_url }}"
SERVICENOW_USER="{{ servicenow_admin_user }}"
SERVICENOW_PASS="{{ vault_servicenow_admin_password }}"

# OpenShift Catalog Item IDs
OPENSHIFT_BASIC_CATALOG_ID="{{ openshift_basic_catalog_id | default('1a3b56b1470cfa50292cc82f316d4378') }}"
OPENSHIFT_DATABASE_CATALOG_ID="{{ openshift_database_catalog_id | default('aa3b1e75470cfa50292cc82f316d43e2') }}"

# Workflow Configuration
TARGET_STATE="{{ target_workflow_state | default('2') }}"  # 2 = Work in Progress
ENABLE_DEBUG="{{ enable_debug_logging | default('true') }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_debug() {
    if [ "$ENABLE_DEBUG" = "true" ]; then
        echo -e "${BLUE}[DEBUG]${NC} $1"
    fi
}

# Function to make ServiceNow API calls
call_servicenow_api() {
    local method="$1"
    local endpoint="$2"
    local data="$3"
    
    print_debug "API Call: $method $endpoint"
    
    if [ "$method" = "GET" ]; then
        curl -k --user "${SERVICENOW_USER}:${SERVICENOW_PASS}" \
             -X GET \
             -H "Accept: application/json" \
             "${SERVICENOW_URL}${endpoint}" 2>/dev/null
    else
        curl -k --user "${SERVICENOW_USER}:${SERVICENOW_PASS}" \
             -X "$method" \
             -H "Content-Type: application/json" \
             -H "Accept: application/json" \
             -d "$data" \
             "${SERVICENOW_URL}${endpoint}" 2>/dev/null
    fi
}

# Function to get request details
get_request_details() {
    local req_number="$1"
    
    print_status "Getting details for request: $req_number"
    
    local response=$(call_servicenow_api "GET" "/api/now/table/sc_request?sysparm_query=number=$req_number" "")
    
    if [ "$(echo "$response" | jq -r '.result | length')" -eq 0 ]; then
        print_error "Request $req_number not found!"
        exit 1
    fi
    
    echo "$response" | jq -r '.result[0]'
}

# Function to get request items (RITMs) for a request
get_request_items() {
    local req_sys_id="$1"
    
    print_status "Getting request items for request..."
    
    local response=$(call_servicenow_api "GET" "/api/now/table/sc_req_item?sysparm_query=request=$req_sys_id" "")
    echo "$response" | jq -r '.result[]'
}

# Function to check if catalog item is OpenShift-related
is_openshift_catalog_item() {
    local cat_item_id="$1"
    
    if [ "$cat_item_id" = "$OPENSHIFT_BASIC_CATALOG_ID" ] || [ "$cat_item_id" = "$OPENSHIFT_DATABASE_CATALOG_ID" ]; then
        return 0  # true
    else
        return 1  # false
    fi
}

# Function to get state description
get_state_description() {
    local state="$1"
    
    case "$state" in
        "1")
            echo "Open/Requested (1)"
            ;;
        "2")
            echo "Work in Progress (2)"
            ;;
        "3")
            echo "Closed Complete (3)"
            ;;
        "4")
            echo "Closed Incomplete (4)"
            ;;
        "-1")
            echo "Closed Skipped (-1)"
            ;;
        *)
            echo "Unknown ($state)"
            ;;
    esac
}

# Function to approve and advance workflow
approve_workflow() {
    local req_number="$1"
    
    echo "üéØ ServiceNow Workflow Approval Tool"
    echo "===================================="
    echo "Generated from Jinja2 template"
    echo ""
    
    # Get request details
    local request_data=$(get_request_details "$req_number")
    local req_sys_id=$(echo "$request_data" | jq -r '.sys_id')
    local current_state=$(echo "$request_data" | jq -r '.state')
    local approval_state=$(echo "$request_data" | jq -r '.approval')
    
    print_status "Request: $req_number"
    print_status "Current State: $(get_state_description "$current_state")"
    print_status "Approval State: $approval_state"
    print_debug "Request Sys ID: $req_sys_id"
    echo ""
    
    # Get request items
    print_status "Getting request items..."
    local ritm_data=$(get_request_items "$req_sys_id")
    
    if [ -z "$ritm_data" ]; then
        print_warning "No request items found for this request"
        return
    fi
    
    echo "$ritm_data" | while IFS= read -r ritm; do
        local ritm_number=$(echo "$ritm" | jq -r '.number')
        local ritm_sys_id=$(echo "$ritm" | jq -r '.sys_id')
        local ritm_state=$(echo "$ritm" | jq -r '.state')
        local cat_item_id=$(echo "$ritm" | jq -r '.cat_item.value // .cat_item')
        
        print_status "Processing RITM: $ritm_number"
        print_status "  Current State: $(get_state_description "$ritm_state")"
        print_debug "  Catalog Item ID: $cat_item_id"
        print_debug "  RITM Sys ID: $ritm_sys_id"
        
        # Check if this is an OpenShift request
        if is_openshift_catalog_item "$cat_item_id"; then
            print_success "  ‚úÖ OpenShift request detected!"
            
            case "$ritm_state" in
                "1")
                    print_status "  Moving from Open/Requested (1) ‚Üí Work in Progress ($TARGET_STATE)"
                    local work_notes="üîÑ Manually approved via script - Moving to Work in Progress\\n\\nüéØ This should trigger the enhanced business rule to:\\n‚Ä¢ Create tracking incident\\n‚Ä¢ Launch AAP job\\n‚Ä¢ Provide real-time status updates"
                    local update_response=$(call_servicenow_api "PATCH" "/api/now/table/sc_req_item/$ritm_sys_id" "{\"state\": \"$TARGET_STATE\", \"work_notes\": \"$work_notes\"}")
                    print_success "  ‚úÖ Moved to Work in Progress - Enhanced workflow should trigger!"
                    ;;
                "$TARGET_STATE")
                    print_warning "  ‚ö†Ô∏è  Already in Work in Progress - Enhanced workflow should have triggered"
                    # Force trigger by updating work notes
                    local work_notes="üîÑ Forcing business rule trigger - state=$TARGET_STATE should activate enhanced workflow"
                    local update_response=$(call_servicenow_api "PATCH" "/api/now/table/sc_req_item/$ritm_sys_id" "{\"work_notes\": \"$work_notes\"}")
                    print_status "  üîÑ Forced business rule trigger"
                    ;;
                "3")
                    print_warning "  ‚ö†Ô∏è  Already Closed Complete - Request finished"
                    ;;
                "4")
                    print_warning "  ‚ö†Ô∏è  Closed Incomplete - Request failed"
                    ;;
                *)
                    print_warning "  ‚ö†Ô∏è  Unexpected state: $(get_state_description "$ritm_state")"
                    ;;
            esac
        else
            print_warning "  ‚ö†Ô∏è  Not an OpenShift request - skipping"
            print_debug "  Expected catalog IDs: $OPENSHIFT_BASIC_CATALOG_ID or $OPENSHIFT_DATABASE_CATALOG_ID"
            print_debug "  Found catalog ID: $cat_item_id"
        fi
        
        echo ""
    done
    
    echo "üéØ Workflow Approval Complete!"
    echo ""
    print_success "‚úÖ What should happen next:"
    print_success "  1. Enhanced business rule should trigger"
    print_success "  2. Incident should be created for tracking"
    print_success "  3. AAP job should launch automatically"
    print_success "  4. Real-time status updates in incident"
    echo ""
    print_status "üîç Monitor the following:"
    print_status "  ‚Ä¢ ServiceNow incidents for tracking"
    print_status "  ‚Ä¢ AAP jobs for execution status"
    print_status "  ‚Ä¢ RITM work notes for updates"
    echo ""
    print_status "üîß Configuration used:"
    print_status "  ‚Ä¢ ServiceNow URL: $SERVICENOW_URL"
    print_status "  ‚Ä¢ Target State: $(get_state_description "$TARGET_STATE")"
    print_status "  ‚Ä¢ Debug Logging: $ENABLE_DEBUG"
}

# Main script
main() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 <REQUEST_NUMBER>"
        echo "Example: $0 REQ0010025"
        echo ""
        echo "Configuration:"
        echo "  ServiceNow URL: $SERVICENOW_URL"
        echo "  Target State: $(get_state_description "$TARGET_STATE")"
        echo "  Debug Mode: $ENABLE_DEBUG"
        exit 1
    fi
    
    local req_number="$1"
    
    # Validate request number format
    if ! echo "$req_number" | grep -qE '^REQ[0-9]{7}$'; then
        print_error "Invalid request number format. Expected: REQ0010025"
        exit 1
    fi
    
    approve_workflow "$req_number"
}

# Run main function with all arguments
main "$@"
